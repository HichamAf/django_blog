[{"model": "blog.comment", "pk": 1, "fields": {"creator": 1, "content": "This is a great course!", "content_type": 8, "object_id": 1, "created_at": "2024-12-28T23:28:53.015Z", "modified_at": "2024-12-28T23:28:53.026Z"}}, {"model": "blog.comment", "pk": 2, "fields": {"creator": 1, "content": "first comment", "content_type": 8, "object_id": 2, "created_at": "2024-12-29T19:49:30.678Z", "modified_at": "2024-12-29T19:49:30.678Z"}}, {"model": "blog.comment", "pk": 3, "fields": {"creator": 1, "content": "hello", "content_type": 8, "object_id": 2, "created_at": "2024-12-29T19:54:51.568Z", "modified_at": "2024-12-29T19:54:51.568Z"}}, {"model": "blog.comment", "pk": 4, "fields": {"creator": 1, "content": "another comment", "content_type": 8, "object_id": 2, "created_at": "2024-12-29T20:01:42.696Z", "modified_at": "2024-12-29T20:01:42.696Z"}}, {"model": "blog.comment", "pk": 5, "fields": {"creator": 1, "content": "Hello!", "content_type": 8, "object_id": 1, "created_at": "2024-12-30T17:45:24.144Z", "modified_at": "2024-12-30T17:45:24.145Z"}}, {"model": "blog.comment", "pk": 6, "fields": {"creator": 1, "content": "test", "content_type": 8, "object_id": 1, "created_at": "2024-12-31T09:40:54.681Z", "modified_at": "2024-12-31T09:40:54.681Z"}}, {"model": "blog.comment", "pk": 7, "fields": {"creator": 1, "content": "test", "content_type": 8, "object_id": 2, "created_at": "2024-12-31T10:00:50.682Z", "modified_at": "2024-12-31T10:00:50.682Z"}}, {"model": "blog.comment", "pk": 8, "fields": {"creator": 1, "content": "test 2", "content_type": 8, "object_id": 2, "created_at": "2024-12-31T10:06:33.082Z", "modified_at": "2024-12-31T10:06:33.082Z"}}, {"model": "blog.comment", "pk": 9, "fields": {"creator": 1, "content": "test 3", "content_type": 8, "object_id": 2, "created_at": "2024-12-31T10:09:01.948Z", "modified_at": "2024-12-31T10:09:01.948Z"}}, {"model": "blog.comment", "pk": 10, "fields": {"creator": 1, "content": "test", "content_type": 8, "object_id": 3, "created_at": "2024-12-31T10:09:22.743Z", "modified_at": "2024-12-31T10:09:22.743Z"}}, {"model": "blog.comment", "pk": 11, "fields": {"creator": 1, "content": "test", "content_type": 8, "object_id": 3, "created_at": "2024-12-31T10:10:47.343Z", "modified_at": "2024-12-31T10:10:47.343Z"}}, {"model": "blog.comment", "pk": 12, "fields": {"creator": 1, "content": "ii", "content_type": 8, "object_id": 1, "created_at": "2024-12-31T11:34:17.068Z", "modified_at": "2024-12-31T11:34:17.068Z"}}, {"model": "blog.comment", "pk": 13, "fields": {"creator": 1, "content": "333", "content_type": 8, "object_id": 1, "created_at": "2024-12-31T11:37:17.264Z", "modified_at": "2024-12-31T11:37:17.264Z"}}, {"model": "blog.tag", "pk": 1, "fields": {"value": "django"}}, {"model": "blog.post", "pk": 1, "fields": {"author": 1, "created_at": "2024-12-28T22:11:47.286Z", "modified_at": "2024-12-29T00:10:57.867Z", "published_at": "2024-12-29T00:10:55Z", "title": "01. Introduction and Django Admin", "slug": "01-introduction-and-django-admin", "summary": "Learning Objectives\r\n�\tSetup a blog application in Django.\r\n�\tConfigure the dev server to run inside the Codio platform.\r\n�\tRun database migrations.\r\n�\tCreate the Tag and Post models.\r\n�\tRegister the Tag and Post models with Django Admin.\r\n�\tCreate a post through Django Admin.", "content": "Introduction\r\nHello, and welcome to Django. This course is divided into four modules. We�ll be building blog project in Django throughout the course, gradually adding features to it. The first module expands on the Django fundamentals. We�ll look at the admin section, generic model relationships and the Bootstrap HTML framework, then how using custom template tags and filters can cut down the amount of code in your templates.\r\nModule 2 introduces 12-Factor Apps: an informal standard for configuration applications. We�ll look at the most important of these factors to build into a Django application (configuration and logging). Then we�ll give you a better understanding of some of Django�s security features, then discuss some different ways to deploy your application.\r\nModule 3 is about performance. We�ll introduce caching and how to use it with your Django application, then look at how to optimize your database and queries for more speed.\r\nModule 4 is about the user. You�ll learn about custom user models, and how they differ from just using a profile object. We�ll then look at some third party modules to help with users and registration: Django Registrations (to make users validate their email address after signing up), and Django All Auth to allow authentication via third party services or social networks. We close the module by walking through how to set up authentication against Google OAuth.\r\n\r\nThe Project: Blango\r\nIn this course (and through Course 3) you�ll be building a Blog app in Django. It�s called Blango (Blog + Django, of course!)\r\nHopefully the concepts behind the app are quite familiar. It�s been deliberately chosen to let you focus on the Django side of things rather than the domain/data model. Each author is a Django user and can create blog Posts which have Tags assigned to them. Comments can be added to Posts, and files can be attached to either Posts or Comments.\r\nNot everything will be built at once, we will gradually add features to make the application more useful.", "tags": [1]}}, {"model": "blog.post", "pk": 2, "fields": {"author": 2, "created_at": "2024-12-28T22:26:10.803Z", "modified_at": "2024-12-29T00:11:03.188Z", "published_at": "2024-12-29T00:11:01Z", "title": "02. Project Setup", "slug": "02-project-setup", "summary": "Setting up development environment", "content": "<h3>Install python</h3>\r\n\r\n<p>If you�re using Linux or macOS, you probably have Python installed. If you�re using Windows, you can download a Python installer from the python.org website. You can download Python for your OS from https://www.python.org/downloads/.</p>\r\n\r\n<h3>Creating a Python virtual environment</h3>\r\n\r\n<p>Use the following command : py -m venv my_env\r\nRun the following command to activate your virtual environment: .\\my_env\\Scripts\\activate</p>\r\n\r\n<h3>Installing Django with pip</h3>\r\n<p>py -m pip install django</p>\r\n\r\n<h3>Creating your first project</h3>\r\n<p>django-admin startproject blango .</p>\r\n\r\n<p>Change in to the blango directory and start an app called blog.</p>\r\n\r\n<p>cd blango\r\npython3 manage.py startapp blog</p>\r\n\r\n<p>As usual, you�ll need to add the blog app to your INSTALLED_APPS in your Django settings.py file.\r\nINSTALLED_APPS = [\r\n    'django.contrib.admin',\r\n    'django.contrib.auth',\r\n    'django.contrib.contenttypes',\r\n    'django.contrib.sessions',\r\n    'django.contrib.messages',\r\n    'django.contrib.staticfiles',\r\n    'blog',\r\n]</p>", "tags": [1]}}, {"model": "blog.post", "pk": 3, "fields": {"author": 3, "created_at": "2024-12-28T22:34:07.373Z", "modified_at": "2024-12-29T00:11:09.091Z", "published_at": "2024-12-29T00:11:06Z", "title": "03. Project Migration", "slug": "03-project-migration", "summary": "The final piece of set up is to run the database migrations with the migrate management command in the terminal.", "content": "<p>The final piece of set up is to run the database migrations with the migrate management command in the terminal.</p>\r\n\r\npy manage.py makemigrations\r\npy manage.py migrate\r\n\r\nIf successful, you should see the following output:\r\nOperations to perform:\r\n  Apply all migrations: admin, auth, contenttypes, sessions\r\nRunning migrations:\r\n  Applying contenttypes.0001_initial... OK\r\n  Applying auth.0001_initial... OK\r\n  Applying admin.0001_initial... OK\r\n  Applying admin.0002_logentry_remove_auto_add... OK\r\n  Applying admin.0003_logentry_add_action_flag_choices... OK\r\n  Applying contenttypes.0002_remove_content_type_name... OK\r\n  Applying auth.0002_alter_permission_name_max_length... OK\r\n  Applying auth.0003_alter_user_email_max_length... OK\r\n  Applying auth.0004_alter_user_username_opts... OK\r\n  Applying auth.0005_alter_user_last_login_null... OK\r\n  Applying auth.0006_require_contenttypes_0002... OK\r\n  Applying auth.0007_alter_validators_add_error_messages... OK\r\n  Applying auth.0008_alter_user_username_max_length... OK\r\n  Applying auth.0009_alter_user_last_name_max_length... OK\r\n  Applying auth.0010_alter_group_name_max_length... OK\r\n  Applying auth.0011_update_proxy_permissions... OK\r\n  Applying auth.0012_alter_user_first_name_max_length... OK\r\n  Applying sessions.0001_initial... OK\r\n\r\nA user needs to be created, to be able to log into the Django admin site. This is done in the terminal with the createuser management command.\r\n\r\npy manage.py createsuperuser\r\n\r\nIf successful, you should see the following interaction. You can use your own username, email, and password. Be sure to remember them as this information will be used throughout this project.\r\n\r\nUsername (leave blank to use '...'):\r\nEmail address: ...@example.com\r\nPassword: password\r\nPassword (again): password\r\nThis password is too common.\r\nBypass password validation and create user anyway? [y/N]: y\r\nSuperuser created successfully.", "tags": [1]}}, {"model": "blog.post", "pk": 4, "fields": {"author": 1, "created_at": "2024-12-28T22:36:27.371Z", "modified_at": "2024-12-29T00:11:23.336Z", "published_at": "2024-12-29T00:11:20Z", "title": "04. Models", "slug": "04-models", "summary": "Now we can get started on our models. The data models we need to get started with are simple: there�s Post which contains the blog post, and Tag, which contains the tag text. They are related to each other with a ManyToManyField. We won�t spend too much time going through them as you should be familiar with Django models.", "content": "Import settings in addition to models from their respective locations.\r\nfrom django.db import models\r\nfrom django.conf import settings\r\nHere�s the Tag class.\r\nclass Tag(models.Model):\r\n    value = models.TextField(max_length=100)\r\n\r\n    def __str__(self):\r\n        return self.value\r\nIt�s simple and just contains a single field for value.\r\nThe Post model is a little more complex but hopefully the fields aren�t too unfamiliar.\r\nclass Post(models.Model):\r\n    author = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.PROTECT)\r\n    created_at = models.DateTimeField(auto_now_add=True)\r\n    modified_at = models.DateTimeField(auto_now=True)\r\n    published_at = models.DateTimeField(blank=True, null=True)\r\n    title = models.TextField(max_length=100)\r\n    slug = models.SlugField()\r\n    summary = models.TextField(max_length=500)\r\n    content = models.TextField()\r\n    tags = models.ManyToManyField(Tag, related_name=\"posts\")\r\n\r\n    def __str__(self):\r\n        return self.title\r\nSome of the things of note to point out are:\r\nAuthor Foreign Key\r\nThe author is a ForeignKey to settings.AUTH_USER_MODEL: a Django setting which is a string. ForeignKey can be used either by passing the class itself, or passing a string which is parsed to load and refer to the class. By passing settings.AUTH_USER_MODEL, we�ll be able to change the model class that�s used for authentication by updating the Django settings, and all models that refer to this setting will update automatically to use the right model. By default, the value is blango_auth.User, which refers to the User model in the Django auth application.\r\nTo use the class in our ForeignKey, we need use the Django settings model. Verify that you have from django.conf import settings at the top of the file.\r\nDate Fields\r\nThe field created_at sets auto_now_add to True which means that when a Post is saved, its creation date and time will automatically be set. Similarly, modified_at is instantiated with auto_now set to True, which means it will be set to the current date and time whenever a Post is saved.\r\nSlugs and Slug Field\r\nA slug is a short string designed to be used as an identifier, such as in a URL. Normally it is composed of lower case letters, numbers, and dashes. Slugs are used for search engine optimization (making pages rank higher in search engine results), as well as to make URLs more readable for humans.\r\nTaking one of the posts from the official Django blog as an example: djangoproject.com/weblog/2021/may/26/django-irc-channels-migration-liberachat/. The slug from this URL is django-irc-channels-migration-liberachat. You can imagine that the Blog post probably has a numeric ID, but accessing it through a URL like djangoproject.com/weblog/35 isn�t very friendly.\r\nThe slug is usually generated from the title of the page, with common words removed. In the Django example the page title is Django IRC Channels migration to Libera.Chat. You can see the slug is generated by converting to lowercase, switching spaces with dashes and removing non alpha-numeric characters.\r\nThe Django SlugField inherits from CharField but adds some validation to ensure the value looks like a slug (lowercase, alphanumeric and dashes only) and by default limits it to 50 characters.\r\nDjango provides the [slugify](https://docs.djangoproject.com/en/3.2/ref/utils/#django.utils.text.slugify) function to convert an arbitrary string to a �slugified� version. We can also configure the Django admin to convert one field into a slug. For example, converting title to slug. We�ll see how to do this in the next section, Django Admin Quickstart.\r\nContent\r\nFor simplicity we�ll just be storing the actual blog content as HTML, so we don�t have to worry about doing any kind of conversion when displaying it, we�ll just render the content field verbatim. This is not the most secure approach, so it�s only advisable if you trust your authors not to add malicious HTML. If you�re building a site that will output user-supplied HTML, consider using something like Bleach to remove unsafe HTML.\r\nMigrations\r\nBefore getting started with Django admin, we need to perform the usual steps when creating a new model. First, make the migrations with the makemigrations management command.\r\n\r\npy manage.py makemigrations\r\n\r\nIf successful, you should see the following output:\r\nMigrations for 'blog':\r\n  blog/migrations/0001_initial.py\r\n    - Create model Tag\r\n    - Create model Post\r\nThen apply the migrations to the database with the migrate management command.\r\n\r\npy manage.py migrate\r\n\r\nIf successful, you should see the following output:\r\nOperations to perform:\r\n  Apply all migrations: admin, auth, blog, contenttypes, sessions\r\nRunning migrations:\r\n  Applying blog.0001_initial... OK", "tags": [1]}}, {"model": "blog.post", "pk": 5, "fields": {"author": 1, "created_at": "2024-12-28T22:38:30.540Z", "modified_at": "2024-12-29T00:11:43.496Z", "published_at": "2024-12-29T00:11:40Z", "title": "05. Django Admin Quickstart", "slug": "05-django-admin-quickstart", "summary": "One of the features of Django that makes building websites with dynamic content so fast is its built-in admin system. It provides a web interface that lets you create, edit and delete any Django model instances that you choose. The admin system is enabled by default when you start a Django project, but only models that you choose are exposed. By default the path to access the admin UI is /admin/, (e.g. http://127.0.0.1:8000/admin/ if running the Django debug server).", "content": "Registering Models to the admin UI\r\nUpon scaffolding a Djanog app, an admin.py file is automatically added. This is where Django will read the definition for the admin interface for your app. There are two ways to register a model and have it show in the Django admin UI. You can either register the model directly, which will just use the defaults and allow all fields to be editable. Most of the time, this is adequate, but sometimes you might want to create a model admin class by subclassing the Django admin.ModelAdmin class. This allows you to set options about how your model is displayed in the admin. Let�s examine the admin.py file and then see how to implement both these methods.\r\nWhen scaffolded the admin.py file contains just one code line (and a comment, which can be removed):\r\nfrom django.contrib import admin\r\nAs you can probably guess, this imports the Django admin module, ready for use. To register a model into the admin section, we use the admin.site.register function.\r\nWhat is admin.site?\r\nadmin.site is an object representing the admin site. We also saw it used in the urls.py file, routing the admin/ path to admin.site.urls. We won�t discuss its functionality in depth, but it�s possible to customize the site to override things like the page titles, header text and template. You can find more details about this at the Django Admin Site Documentation\r\nLet�s start by looking at the simplest method of registering a model. We�ll do this with the Tag model. First our model needs to be imported into the admin.py file:\r\nfrom blog.models import Tag, Post\r\nThen register it:\r\nadmin.site.register(Tag)\r\nTo configure how the admin site behaves with a certain model, a subclass of admin.ModelAdmin must be created. This subclass�s attributes determine how the model is displayed. First let�s look at how we�ll create one, for the Post model.\r\nclass PostAdmin(admin.ModelAdmin):\r\n    prepopulated_fields = {\"slug\": (\"title\",)}\r\nHere we�re setting just one attribute, prepopulated_fields. When used in this way, some JavaScript is inserted into the admin page so that the slug field updates when the title field changes. It will automatically �slugify� the title. But, there are many other ways to customise the ModelAdmin.\r\n\r\nNow that the PostAdmin class is defined, let�s return to the register function. The PostAdmin class is passed as the second argument:\r\nadmin.site.register(Post, PostAdmin)", "tags": [1]}}, {"model": "blango_auth.User", "pk": 1, "fields": {"password": "argon2$argon2id$v=19$m=102400,t=2,p=8$NWRBME12TDhPYkN6UXdsREhVUkx5ag$/lc9edx1J4xff8fIWuGqaeKpvFaToluYViCD7ynG5wU", "last_login": "2024-12-31T10:38:21.269Z", "is_superuser": true, "username": "admin", "first_name": "<h1>hicham</h1>", "last_name": "Afilali", "email": "admin@blog.com", "is_staff": true, "is_active": true, "date_joined": "2024-12-28T22:01:49Z", "groups": [], "user_permissions": []}}, {"model": "blango_auth.User", "pk": 2, "fields": {"password": "pbkdf2_sha256$870000$sRwBI3ZzxxdpGwiX3X53XK$ir9MMZ4U1U/PODQ5lRzTBFNq3wITw3ZEW44swtbf2Ms=", "last_login": "2024-12-29T09:53:42Z", "is_superuser": true, "username": "moderator_1", "first_name": "Jari", "last_name": "Hevonen", "email": "jari.hevonen@blog.com", "is_staff": true, "is_active": true, "date_joined": "2024-12-28T23:55:53Z", "groups": [], "user_permissions": [1, 2, 3, 4, 9, 10, 11, 12, 5, 6, 7, 8, 13, 14, 15, 16, 33, 34, 35, 36, 29, 30, 31, 32, 25, 26, 27, 28, 17, 18, 19, 20, 21, 22, 23, 24]}}, {"model": "blango_auth.User", "pk": 3, "fields": {"password": "!drw9SP3qQi6DWGefsHvyK0wvZ6AR4Dvl5WDeUM2l", "last_login": null, "is_superuser": false, "username": "moderator_2", "first_name": "Sakari", "last_name": "Petteri", "email": "sakari.petteri@blog.com", "is_staff": false, "is_active": true, "date_joined": "2024-12-28T23:59:08Z", "groups": [], "user_permissions": [1, 2, 3, 4, 9, 10, 11, 12, 5, 6, 7, 8, 13, 14, 15, 16, 33, 34, 35, 36, 29, 30, 31, 32, 25, 26, 27, 28, 17, 18, 19, 20, 21, 22, 23, 24]}}]